import unittest

import numpy as np
from skfda import FDataGrid, FDataBasis
from skfda.representation.basis import Fourier
from skfda.preprocessing.dim_reduction.projection import FPCABasis, FPCAGrid
from skfda.datasets import fetch_weather


class FPCATestCase(unittest.TestCase):

    def test_basis_fpca_fit_attributes(self):
        fpca = FPCABasis()
        with self.assertRaises(AttributeError):
            fpca.fit(None)

        basis = Fourier(n_basis=1)
        # check that if n_components is bigger than the number of samples then
        # an exception should be thrown
        fd = FDataBasis(basis, [[0.9]])
        with self.assertRaises(AttributeError):
            fpca.fit(fd)

        # check that n_components must be smaller than the number of elements
        # of target basis
        fd = FDataBasis(basis, [[0.9], [0.7], [0.5]])
        with self.assertRaises(AttributeError):
            fpca.fit(fd)

    def test_discretized_fpca_fit_attributes(self):
        fpca = FPCAGrid()
        with self.assertRaises(AttributeError):
            fpca.fit(None)

        # check that if n_components is bigger than the number of samples then
        # an exception should be thrown
        fd = FDataGrid([[0.5], [0.1]], sample_points=[0])
        with self.assertRaises(AttributeError):
            fpca.fit(fd)

        # check that n_components must be smaller than the number of attributes
        # in the FDataGrid object
        fd = FDataGrid([[0.9], [0.7], [0.5]], sample_points=[0])
        with self.assertRaises(AttributeError):
            fpca.fit(fd)

    def test_basis_fpca_fit_result(self):

        n_basis = 9
        n_components = 3

        fd_data = fetch_weather()['data'].coordinates[0]
        fd_data = FDataGrid(np.squeeze(fd_data.data_matrix),
                            np.arange(0.5, 365, 1))

        # initialize basis data
        basis = Fourier(n_basis=9, domain_range=(0, 365))
        fd_basis = fd_data.to_basis(basis)

        fpca = FPCABasis(n_components=n_components)
        fpca.fit(fd_basis)

        # results obtained using Ramsay's R package
        results = [[0.9231551, 0.1364966, 0.3569451, 0.0092012, -0.0244525,
                    -0.02923873, -0.003566887, -0.009654571, -0.0100063],
                   [-0.3315211, -0.0508643, 0.89218521, 0.1669182, 0.2453900,
                    0.03548997, 0.037938051, -0.025777507, 0.008416904],
                   [-0.1379108, 0.9125089, 0.00142045, 0.2657423, -0.2146497,
                    0.16833314, 0.031509179, -0.006768189, 0.047306718]]
        results = np.array(results)

        # compare results obtained using this library. There are slight
        # variations due to the fact that we are in two different packages
        for i in range(n_components):
            if np.sign(fpca.components_.coefficients[i][0]) != np.sign(
                    results[i][0]):
                results[i, :] *= -1
        np.testing.assert_allclose(fpca.components_.coefficients, results,
                                   atol=1e-7)

    def test_grid_fpca_fit_result(self):

        n_components = 1

        fd_data = fetch_weather()['data'].coordinates[0]

        fpca = FPCAGrid(n_components=n_components, weights=[1] * 365)
        fpca.fit(fd_data)

        # results obtained using fda.usc for the first component
        results = [
            [-0.06958281, -0.07015412, -0.07095115, -0.07185632, -0.07128256,
             -0.07124209, -0.07364828, -0.07297663, -0.07235438, -0.07307498,
             -0.07293423, -0.07449293, -0.07647909, -0.07796823, -0.07582476,
             -0.07263243, -0.07241871, -0.0718136, -0.07015477, -0.07132331,
             -0.0711527, -0.07435933, -0.07602666, -0.0769783, -0.07707199,
             -0.07503802, -0.0770302, -0.07705581, -0.07633515, -0.07624817,
             -0.07631568, -0.07619913, -0.07568, -0.07595155, -0.07506939,
             -0.07181941, -0.06907624, -0.06735476, -0.06853985, -0.06902363,
             -0.07098882, -0.07479412, -0.07425241, -0.07555835, -0.0765903,
             -0.07651853, -0.07682536, -0.07458996, -0.07631711, -0.07726509,
             -0.07641246, -0.0744066, -0.07501397, -0.07302722, -0.07045571,
             -0.06912529, -0.06792186, -0.06830739, -0.06898433, -0.07000192,
             -0.07014513, -0.06994886, -0.07115909, -0.073999, -0.07292669,
             -0.07139879, -0.07226865, -0.07187915, -0.07122995, -0.06975022,
             -0.06800613, -0.06900793, -0.07186378, -0.07114479, -0.07015252,
             -0.06944782, -0.068291, -0.06905348, -0.06925773, -0.06834624,
             -0.06837319, -0.06824067, -0.06644614, -0.06637313, -0.06626312,
             -0.06470209, -0.0645058, -0.06477729, -0.06411049, -0.06158499,
             -0.06305197, -0.06398006, -0.06277579, -0.06282124, -0.06317684,
             -0.0614125, -0.05961922, -0.05875443, -0.05845781, -0.05828608,
             -0.05666474, -0.05495706, -0.05446301, -0.05468254, -0.05478609,
             -0.05440798, -0.05312339, -0.05102368, -0.05160285, -0.05077954,
             -0.04979648, -0.04890853, -0.04745462, -0.04496763, -0.0448713,
             -0.04599596, -0.04688998, -0.04488872, -0.04404507, -0.04420729,
             -0.04368153, -0.04254381, -0.0411764, -0.04022811, -0.03999746,
             -0.03963634, -0.03832502, -0.0383956, -0.04015374, -0.0387544,
             -0.03777315, -0.03830728, -0.03768616, -0.03714081, -0.03781918,
             -0.03739374, -0.03659894, -0.03563342, -0.03658407, -0.03686991,
             -0.03543746, -0.03518799, -0.03361226, -0.0321534, -0.03050438,
             -0.02958411, -0.02855023, -0.02913402, -0.02992464, -0.02899548,
             -0.02891629, -0.02809554, -0.02702642, -0.02672194, -0.02678648,
             -0.02698471, -0.02628085, -0.02674285, -0.02658515, -0.02604447,
             -0.0245711, -0.02413174, -0.02342496, -0.022898, -0.02216152,
             -0.02272283, -0.02199741, -0.02305362, -0.02371371, -0.02320865,
             -0.02234777, -0.0225018, -0.02104359, -0.02203346, -0.02052545,
             -0.01987457, -0.01947911, -0.01986949, -0.02012196, -0.01958515,
             -0.01906753, -0.01857869, -0.01874101, -0.01827973, -0.017752,
             -0.01702056, -0.01759611, -0.01888485, -0.01988159, -0.01951675,
             -0.01872967, -0.01866667, -0.0183576, -0.01909758, -0.018599,
             -0.01910036, -0.01930315, -0.01958856, -0.02129936, -0.0216614,
             -0.0204397, -0.02002368, -0.02058828, -0.02149915, -0.02167326,
             -0.02238569, -0.02211907, -0.02168336, -0.02124387, -0.02131655,
             -0.02130508, -0.02181227, -0.02230632, -0.02223732, -0.0228216,
             -0.02355137, -0.02275145, -0.02286893, -0.02437776, -0.02523897,
             -0.0248354, -0.02319174, -0.02335831, -0.02405789, -0.02483273,
             -0.02428119, -0.02395295, -0.02437185, -0.02476434, -0.02347973,
             -0.02385957, -0.02451257, -0.02414586, -0.02439035, -0.02357782,
             -0.02417295, -0.02504764, -0.02682569, -0.02807111, -0.02886335,
             -0.02943406, -0.02956806, -0.02893096, -0.02903812, -0.02999862,
             -0.029421, -0.03016203, -0.03118823, -0.03076205, -0.03005985,
             -0.03079187, -0.03215188, -0.03271075, -0.03146124, -0.03040965,
             -0.03008436, -0.03085897, -0.03015341, -0.03014661, -0.03110255,
             -0.03271278, -0.03217399, -0.0331721, -0.03459221, -0.03572073,
             -0.03560707, -0.03531492, -0.03687657, -0.03800143, -0.0373808,
             -0.03729927, -0.03748666, -0.03754171, -0.03790408, -0.03963726,
             -0.03992153, -0.03812243, -0.0373844, -0.0385394, -0.03849716,
             -0.03826345, -0.03743958, -0.0380861, -0.03857622, -0.04099357,
             -0.04102509, -0.04170207, -0.04283573, -0.04320618, -0.04269438,
             -0.04467527, -0.04470603, -0.04496092, -0.04796417, -0.04796633,
             -0.047863, -0.04883668, -0.0505939, -0.05112441, -0.04960962,
             -0.05000041, -0.04962112, -0.05087008, -0.0521671, -0.05369792,
             -0.05478139, -0.05559221, -0.05669698, -0.05654505, -0.05731113,
             -0.05783543, -0.05766056, -0.05754354, -0.05724272, -0.05831026,
             -0.05847512, -0.05804533, -0.05875046, -0.06021703, -0.06147975,
             -0.06213918, -0.0645805, -0.06500849, -0.06361716, -0.06315227,
             -0.06306436, -0.06425743, -0.06626847, -0.06615213, -0.06881004,
             -0.06942296, -0.06889225, -0.06868663, -0.0678667, -0.06720133,
             -0.06771172, -0.06885042, -0.06896979, -0.06961627, -0.07211988,
             -0.07252956, -0.07265559, -0.07264195, -0.07306334, -0.07282035,
             -0.07196505, -0.07210595, -0.07203942, -0.07105821, -0.06920599,
             -0.06892264, -0.06699939, -0.06537829, -0.06543323, -0.06913186,
             -0.07210039, -0.07219987, -0.07124228, -0.07065497, -0.06996833,
             -0.0674457, -0.06800847, -0.06784175, -0.06592871, -0.06723401]]

        results = np.array(results)

        # compare results obtained using this library. There are slight
        # variations due to the fact that we are in two different packages
        for i in range(n_components):
            if np.sign(fpca.components_.data_matrix[i][0]) != np.sign(
                    results[i][0]):
                results[i, :] *= -1
        np.testing.assert_allclose(
            fpca.components_.data_matrix.reshape(
                fpca.components_.data_matrix.shape[:-1]),
            results,
            rtol=1e-6)


if __name__ == '__main__':
    unittest.main()
